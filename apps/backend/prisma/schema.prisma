generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  googleId             String?       @unique
  email                String        @unique
  password             String?
  name                 String
  phone                String?
  birthday             DateTime?
  bio                  String?
  role                 Role[]
  specialties          Specialty[]   @relation("EmployeeSpecialties")
  services             Service[]     @relation("EmployeeServices")
  blogs                BlogPost[]    @relation("EmployeeBlogs")
  employeeAppointments Appointment[] @relation("EmployeeAppointment")
  patientAppointments  Appointment[] @relation("UserAppointment")
  imgUrl               String?
  refreshToken         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  likedPosts           BlogPost[]    @relation("UserLikes")
}

enum Role {
  USER
  PATIENT
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  MANAGER
  EMPLOYEE
}

model Specialty {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  employees   User[]  @relation("EmployeeSpecialties")
}

model Appointment {
  id         Int               @id @default(autoincrement())
  user       User              @relation("UserAppointment", fields: [userId], references: [id])
  userId     Int
  employee   User              @relation("EmployeeAppointment", fields: [employeeId], references: [id])
  employeeId Int
  service    Service?          @relation("AppointmentService", fields: [serviceId], references: [id])
  serviceId  Int?
  status     AppointmentStatus
  date       DateTime
  createdAt  DateTime          @default(now())
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  imgUrl       String?
  slots        Int
  employees    User[]        @relation("EmployeeServices")
  appointments Appointment[] @relation("AppointmentService")
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  imgUrl    String
  authorId  Int
  author    User     @relation("EmployeeBlogs", fields: [authorId], references: [id])
  views     Int      @default(0)
  likes     Int      @default(0)
  likedBy   User[]   @relation("UserLikes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
