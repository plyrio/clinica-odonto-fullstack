generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String
  name           String
  phone          String?        
  birthday       DateTime?      
  bio            String?
  role           Role
  appointment    Appointment[]
  imgUrl         String?
  refreshToken   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employee       Employee?
  likedPosts     BlogPost[]     @relation("UserLikes")     
}

model Employee {
  id           Int             @id @default(autoincrement())
  user         User            @relation(fields: [userId], references: [id])
  userId       Int             @unique 
  role         EmployeeRole    // Role do funcionário
  specialties  Speciality[]    @relation("DoctorSpecialties")
  services     Service[]
  appointments Appointment[]
  blogs        BlogPost[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum Role {
  USER
  PATIENT
  EMPLOYEE
  ADMIN
}

enum EmployeeRole {
  DOCTOR
  NURSE
  RECEPTIONIST
  // Outros cargos de funcionários
}

model Speciality {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  employees   Employee[]    @relation("DoctorSpecialties")
}

model Appointment {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  employee  Employee          @relation(fields: [employeeId], references: [id])
  employeeId Int
  service   Service?          @relation(fields: [serviceId], references: [id])
  serviceId Int?
  status    AppointmentStatus
  date      DateTime
  createdAt DateTime          @default(now())
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  imgUrl       String
  slots        Int 
  employees    Employee[]
  appointments Appointment[]
}

model BlogPost {
  id           Int            @id @default(autoincrement())
  title        String
  content      String
  imgUrl       String
  employeeId   Int
  employee     Employee       @relation(fields: [employeeId], references: [id])
  views        Int            @default(0)
  likes        Int            @default(0)
  likedBy      User[]         @relation("UserLikes")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
